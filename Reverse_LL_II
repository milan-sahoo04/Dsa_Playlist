class ListNode {
    int val;
    ListNode next;

    ListNode(int val) {
        this.val = val;
    }
}

public class Reverse_LL_II {

    public ListNode reverseBetween(ListNode head, int left, int right) {
        if (head == null || left == right)
            return head;

        ListNode dummy = new ListNode(0);
        dummy.next = head;
        ListNode prev = dummy;

        // Move prev to node just before the 'left' node
        for (int i = 1; i < left; i++) {
            prev = prev.next;
        }

        ListNode start = prev.next; // Node at position 'left'
        ListNode then = start.next; // Node after 'start'

        // Reverse the sublist
        for (int i = 0; i < right - left; i++) {
            start.next = then.next;
            then.next = prev.next;
            prev.next = then;
            then = start.next;
        }

        return dummy.next;
    }

    // Function to print the linked list
    public static void printList(ListNode head) {
        while (head != null) {
            System.out.print(head.val + " ");
            head = head.next;
        }
        System.out.println();
    }

    // Function to manually create a sample linked list
    public static ListNode createLinkedList() {
        ListNode head = new ListNode(1);
        head.next = new ListNode(2);
        head.next.next = new ListNode(3);
        head.next.next.next = new ListNode(4);
        head.next.next.next.next = new ListNode(5);
        return head;
    }

    public static void main(String[] args) {
        Reverse_LL_II sol = new Reverse_LL_II();

        // Manually create linked list: 1 -> 2 -> 3 -> 4 -> 5
        ListNode head = createLinkedList();

        System.out.print("Original List: ");
        printList(head);

        int left = 2;
        int right = 4;

        head = sol.reverseBetween(head, left, right);

        System.out.print("Reversed Sublist (" + left + " to " + right + "): ");
        printList(head);
    }
}
