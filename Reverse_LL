import java.util.Stack;
import java.util.*;

class Node {
    int data;
    Node next;

    Node(int data, Node next) {
        this.data = data;
        this.next = null;
    }

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

public class Reverse_LL {

    // Brute Force: Using Stack
    // public static Node Reverse_Using_Stack(Node head) {
    // Node temp = head;

    // Stack<Integer> st = new Stack<>();
    // while (temp != null) {
    // st.push(temp.data);
    // temp = temp.next;
    // }
    // temp = head;
    // while (temp != null) {
    // temp.data = st.pop();
    // temp = temp.next;
    // }
    // return head;
    // }

    // Optimal I: Iterative Approach
    // public static Node Reverse_Iterative(Node head) {
    // Node temp = head;
    // Node prev = null;

    // while (temp != null) {
    // Node front = temp.next;
    // temp.next = prev;
    // prev = temp;
    // temp = front;
    // }
    // return prev;
    // }

    // Optimal II: Recursive Approach
    public static Node Reverse_Recursive(Node head) {
        if (head == null || head.next == null) {
            return head;
        }

        Node newHead = Reverse_Recursive(head.next);
        Node front = head.next;
        front.next = head;
        head.next = null;

        return newHead;
    }

    public static void printLinkedList(Node head) {
        Node temp = head;
        while (temp != null) {
            System.out.print(temp.data + " ");
            temp = temp.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        // Original List
        Node head = new Node(1);
        head.next = new Node(3);
        head.next.next = new Node(2);
        head.next.next.next = new Node(4);

        System.out.print("Original Linked List: ");
        printLinkedList(head);

        // Uncomment one by one to test different methods:

        // 1. Brute Force (Using Stack)
        // head = Reverse_Using_Stack(head);

        // 2. Optimal I (Iterative)
        // head = Reverse_Iterative(head);

        // 3. Optimal II (Recursive)
        head = Reverse_Recursive(head);

        System.out.print("Reversed Linked List: ");
        printLinkedList(head);
    }
}
